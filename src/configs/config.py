"""
configs.py
    module contains Config class which is responsible to pull all configurations


=== auth-config ===
    Configuration file 'auth-config.json' contains provider specific authentication details
    Config parameters -
        username - Valid username to login to provider portal
        password - Valid password to login to provider portal

=== access-config ===
    Configuration file 'access-config.json' contains provider specific login url, authentication url, navigation urls,
     sequence of access-url maintained as per real browsing sequence
     Config parameters -
        url - url from provider portal
        method - GET or POST depends on how actually called in portal
        input-param - these parameters used as part of query string for listed url
        xpath - used to parse the data which is pulled from listed url
        result-url-dict - used to store the data for next url use, this url is listed after current url

=== user-input-config ===
    Configuration file 'user-input-config.json' contains provider specific input and filter data, 'input' used as
    part of url query string or request body.
    Config parameters -
        input - like CUSIP/deal name or values for url query string or request body
        filters - used to filter the download_urls generated by parse method

=== file-transfer-config ===
    Configuration file 'file-transfer-config.json' contains provider specific file transfer details
    Config parameters -
        destination-path - destination directory path
        username - destination server username
        password - destination server password
        protocol - protocol used for file transfer like FTP, SFTP etc

=== profile-config ===
    Configuration file 'profile-config.json' contains profile names and details
    Config parameters -
        user-input-config - user input config file

=== logger-config ===
    Configuration file 'logger-config.json' contains logger configurations, the default logger is set up to write
     to both the console and the actual log file

    To control this:
        file_handler -> when: this can ba any of the following:
            's' - seconds
            'm' - minutes
            'h' - hours
            'd' - days
            'w0-w6' - weekday (0 is Monday)
            'midnight'
        file_handler -> interval: number of time units to wait to rotate (defined in when)
        file_handler -> backupCount: how many files to retain before deletion
"""

__author__ = 'Dattatraya Tembare<tembare.datta@gmail.com>'

import json
import os
from logging.config import dictConfig

from common.download_exceptions import *


class Singleton(type):
    _instances = {}

    def __call__(cls):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__()
        return cls._instances[cls]


class Config(metaclass=Singleton):
    """
    Config is a singleton class, which pulls -
        Configurations for authentication details, pulling from 'auth-config.json'
        Configurations for access and navigation details, pulling from 'access-config.json'
        Configurations for user inputs and filters, pulling from 'user-input-config.json'
        Configurations for file transfer, pulling from 'file-transfer-config.json'
        Configurations for profile, pulling from 'profile-config.json.json'
        Configurations for logging, pulling from 'logger-config.json'
    """

    def __init__(self):
        self._auth_config = self.get_config('auth-config.json')
        self._access_config = self.get_config('access-config.json')
        self._profile_config = self.get_config('profile-config.json')
        self._user_input_config = self.get_config('user-input-config.json')
        self._file_transfer_config = self.get_config('file-transfer-config.json')
        dictConfig(self.get_config('logger-config.json'))

    @property
    def auth_config(self):
        return self._auth_config

    @property
    def access_config(self):
        return self._access_config

    @property
    def profile_config(self):
        return self._profile_config

    @property
    def user_input_config(self):
        return self._user_input_config

    @property
    def file_transfer_config(self):
        return self._file_transfer_config

    def get_config(self, _config_file):
        """
        pull all configs initialized in init, raise exception if file not exists
        :param _config_path: config file name
        :return: config dictionary object
        """
        script_dir = os.path.dirname(__file__)  # <-- absolute dir the script is in
        abs_file_path = os.path.join(script_dir, _config_file)
        try:
            with open(abs_file_path, 'r') as f:
                return json.load(f)
        except Exception as e:
            raise DownloadException('9000_UNEXPECTED_ERROR', e) from None
